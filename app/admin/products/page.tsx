"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Edit, Trash2, Plus, Search, Eye, Package, AlertCircle, CheckCircle, ExternalLink } from "lucide-react"
import Image from "next/image"
import Link from "next/link"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Checkbox } from "@/components/ui/checkbox"
import { useToast } from "@/components/ui/use-toast"

// Demo products data - these will be replaced by admin-added products
const demoProducts = [
  {
    id: "demo-1",
    name: "‡§¨‡§æ‡§∏‡§Æ‡§§‡•Ä ‡§ö‡§æ‡§Æ‡§≤",
    nameEn: "Basmati Rice",
    price: 180,
    originalPrice: 200,
    image: "nns.png?height=300&width=300",
    description: "‡§â‡§ö‡•ç‡§ö ‡§ó‡•Å‡§£‡§∏‡•ç‡§§‡§∞‡§ï‡•ã ‡§¨‡§æ‡§∏‡§Æ‡§§‡•Ä ‡§ö‡§æ‡§Æ‡§≤ - ‡•ß ‡§ï‡•á‡§ú‡•Ä",
    category: "grocery",
    inStock: true,
    stock: 50,
    discount: 10,
    createdAt: "2024-01-01",
    isDemo: true,
  },
  {
    id: "demo-2",
    name: "‡§π‡§ø‡§Æ‡§æ‡§≤‡§Ø‡§® ‡§´‡•á‡§∏ ‡§ï‡•ç‡§∞‡•Ä‡§Æ",
    nameEn: "Himalayan Face Cream",
    price: 450,
    originalPrice: 500,
    image: "nns.png?height=300&width=300",
    description: "‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§ú‡§°‡§ø‡§¨‡•Å‡§ü‡•Ä‡§≤‡•á ‡§¨‡§®‡•á‡§ï‡•ã ‡§´‡•á‡§∏ ‡§ï‡•ç‡§∞‡•Ä‡§Æ",
    category: "cosmetics",
    inStock: true,
    stock: 25,
    discount: 10,
    createdAt: "2024-01-02",
    isDemo: true,
  },
]

export default function AdminProductsPage() {
  const [user, setUser] = useState<any>(null)
  const [products, setProducts] = useState<any[]>([])
  const [filteredProducts, setFilteredProducts] = useState<any[]>([])
  const [searchQuery, setSearchQuery] = useState("")
  const [selectedCategory, setSelectedCategory] = useState("")
  const [isLoading, setIsLoading] = useState(true)
  const [selectedProductIds, setSelectedProductIds] = useState<string[]>([])
  const router = useRouter()
  const { toast } = useToast()

  useEffect(() => {
    const userData = localStorage.getItem("user")
    if (userData) {
      const parsedUser = JSON.parse(userData)
      if (parsedUser.role !== "admin") {
        router.push("/")
        return
      }
      setUser(parsedUser)
    } else {
      router.push("/admin/login")
      return
    }

    // Load products from localStorage and combine with demo products
    const adminProducts = JSON.parse(localStorage.getItem("adminProducts") || "[]")
    const allProducts = [...demoProducts, ...adminProducts]
    setProducts(allProducts)
    setFilteredProducts(allProducts)
    setIsLoading(false)
  }, [router])

  // Filter products based on search and category
  useEffect(() => {
    let filtered = products

    if (searchQuery) {
      const searchLower = searchQuery.toLowerCase()
      filtered = filtered.filter(
        (product) =>
          product.name.toLowerCase().includes(searchLower) ||
          product.nameEn?.toLowerCase().includes(searchLower) ||
          product.id.includes(searchLower) ||
          product.category.toLowerCase().includes(searchLower),
      )
    }

    if (selectedCategory) {
      filtered = filtered.filter((product) => product.category === selectedCategory)
    }

    setFilteredProducts(filtered)
  }, [searchQuery, selectedCategory, products])

  const handleDeleteProduct = (productId: string) => {
    if (productId.startsWith("demo-")) {
      alert("‡§°‡•á‡§Æ‡•ã ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§π‡§∞‡•Ç ‡§Æ‡•á‡§ü‡§æ‡§â‡§® ‡§∏‡§ï‡§ø‡§Å‡§¶‡•à‡§®!")
      return
    }

    if (confirm("‡§ï‡•á ‡§§‡§™‡§æ‡§à‡§Ç ‡§Ø‡•ã ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§Æ‡•á‡§ü‡§æ‡§â‡§® ‡§ö‡§æ‡§π‡§®‡•Å‡§π‡•Å‡§®‡•ç‡§õ?")) {
      // Remove from localStorage
      const adminProducts = JSON.parse(localStorage.getItem("adminProducts") || "[]")
      const updatedAdminProducts = adminProducts.filter((p: any) => p.id !== productId)
      localStorage.setItem("adminProducts", JSON.stringify(updatedAdminProducts))

      // Update state
      const updatedProducts = products.filter((p) => p.id !== productId)
      setProducts(updatedProducts)
      toast({
        title: "‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§Æ‡•á‡§ü‡•á‡§ï‡•ã!",
        description: "‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Æ‡•á‡§ü‡•á‡§ï‡•ã ‡§•‡§ø‡§Ø‡•ã‡•§",
        variant: "default",
      })
    }
  }

  const handleBulkDelete = () => {
    if (selectedProductIds.length === 0) {
      alert("‡§ï‡•Å‡§®‡•à ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§®‡§ø‡§µ‡§°‡§ø‡§è‡§®!")
      return
    }

    if (confirm("‡§ï‡•á ‡§§‡§™‡§æ‡§à‡§Ç ‡§Ø‡•ã ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§π‡§∞‡•Ç ‡§Æ‡•á‡§ü‡§æ‡§â‡§® ‡§ö‡§æ‡§π‡§®‡•Å‡§π‡•Å‡§®‡•ç‡§õ?")) {
      // Remove selected products from localStorage
      const adminProducts = JSON.parse(localStorage.getItem("adminProducts") || "[]")
      const updatedAdminProducts = adminProducts.filter((p: any) => !selectedProductIds.includes(p.id))
      localStorage.setItem("adminProducts", JSON.stringify(updatedAdminProducts))

      // Update state
      const updatedProducts = products.filter((p) => !selectedProductIds.includes(p.id))
      setProducts(updatedProducts)
      setSelectedProductIds([])
      toast({
        title: "‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§π‡§∞‡•Ç ‡§Æ‡•á‡§ü‡•á‡§ï‡•ã!",
        description: "‡§ö‡§Ø‡§®‡§ø‡§§ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§π‡§∞‡•Ç ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Æ‡•á‡§ü‡•á‡§ï‡•ã ‡§•‡§ø‡§Ø‡•ã‡•§",
        variant: "default",
      })
    }
  }

  const getCategoryEmoji = (category: string) => {
    switch (category) {
      case "grocery":
        return "üçö"
      case "cosmetics":
        return "üíÑ"
      case "daily-essentials":
        return "üõí"
      case "baby-products":
        return "üë∂"
      case "household":
        return "üè†"
      case "kitchen":
        return "üç≥"
      default:
        return "üì¶"
    }
  }

  const getCategoryName = (category: string) => {
    switch (category) {
      case "grocery":
        return "‡§ñ‡§æ‡§¶‡•ç‡§Ø ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä"
      case "cosmetics":
        return "‡§∏‡•å‡§®‡•ç‡§¶‡§∞‡•ç‡§Ø ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®"
      case "daily-essentials":
        return "‡§¶‡•à‡§®‡§ø‡§ï ‡§∏‡§æ‡§Æ‡§æ‡§®"
      case "baby-products":
        return "‡§¨‡§ö‡•ç‡§ö‡§æ‡§ï‡§æ ‡§∏‡§æ‡§Æ‡§æ‡§®"
      case "household":
        return "‡§ò‡§∞‡§æ‡§Ø‡§∏‡•Ä ‡§∏‡§æ‡§Æ‡§æ‡§®"
      case "kitchen":
        return "‡§≠‡§æ‡§®‡•ç‡§∏‡§æ‡§ï‡§æ ‡§∏‡§æ‡§Æ‡§æ‡§®"
      default:
        return category
    }
  }

  const handleSelectProduct = (productId: string) => {
    setSelectedProductIds((prev) =>
      prev.includes(productId) ? prev.filter((id) => id !== productId) : [...prev, productId],
    )
  }

  const handleSelectAllProducts = () => {
    setSelectedProductIds(filteredProducts.map((product) => product.id))
  }

  const handleSelectNoneProducts = () => {
    setSelectedProductIds([])
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-600"></div>
      </div>
    )
  }

  if (!user) {
    return null
  }

  const categories = ["grocery", "cosmetics", "daily-essentials", "baby-products", "household", "kitchen"]
  const totalProducts = products.length
  const adminProducts = products.filter((p) => !p.isDemo)
  const inStockProducts = products.filter((p) => p.inStock).length
  const outOfStockProducts = totalProducts - inStockProducts

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="container mx-auto px-4">
        {/* Header */}
        <div className="mb-8">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
            <div>
              <h1 className="text-3xl font-bold text-gray-800 mb-2">üì¶ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§®</h1>
              <p className="text-gray-600">‡§∏‡•ç‡§ü‡•ã‡§∞‡§Æ‡§æ ‡§¶‡•á‡§ñ‡§ø‡§®‡•á ‡§∏‡§¨‡•à ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§π‡§∞‡•Ç‡§ï‡•ã ‡§∏‡•Ç‡§ö‡•Ä ‡§∞ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§®</p>
            </div>
            <div className="flex space-x-3">
              <Link href="/products" target="_blank">
                <Button variant="outline" className="border-blue-200 text-blue-600 hover:bg-blue-50">
                  <ExternalLink className="h-4 w-4 mr-2" />
                  ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§π‡•á‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç
                </Button>
              </Link>
              <Link href="/admin/products/new">
                <Button className="bg-red-600 hover:bg-red-700">
                  <Plus className="h-4 w-4 mr-2" />
                  ‡§®‡§Ø‡§æ‡§Å ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§•‡§™‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç
                </Button>
              </Link>
            </div>
          </div>

          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
            <Card className="border-blue-200">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-blue-600">‡§ï‡•Å‡§≤ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§π‡§∞‡•Ç</p>
                    <p className="text-2xl font-bold text-blue-700">{totalProducts}</p>
                  </div>
                  <Package className="h-8 w-8 text-blue-600" />
                </div>
              </CardContent>
            </Card>

            <Card className="border-purple-200">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-purple-600">‡§è‡§°‡§Æ‡§ø‡§® ‡§•‡§™‡•á‡§ï‡§æ</p>
                    <p className="text-2xl font-bold text-purple-700">{adminProducts.length}</p>
                  </div>
                  <Plus className="h-8 w-8 text-purple-600" />
                </div>
              </CardContent>
            </Card>

            <Card className="border-green-200">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-green-600">‡§∏‡•ç‡§ü‡§ï‡§Æ‡§æ ‡§õ</p>
                    <p className="text-2xl font-bold text-green-700">{inStockProducts}</p>
                  </div>
                  <CheckCircle className="h-8 w-8 text-green-600" />
                </div>
              </CardContent>
            </Card>

            <Card className="border-red-200">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-red-600">‡§∏‡•ç‡§ü‡§ï‡§Æ‡§æ ‡§õ‡•à‡§®</p>
                    <p className="text-2xl font-bold text-red-700">{outOfStockProducts}</p>
                  </div>
                  <AlertCircle className="h-8 w-8 text-red-600" />
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Filters */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="text-red-700">üîç ‡§ñ‡•ã‡§ú ‡§∞ ‡§´‡§ø‡§≤‡•ç‡§ü‡§∞</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex flex-col md:flex-row gap-4">
              <div className="flex-1">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                  <Input
                    placeholder="‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§ñ‡•ã‡§ú‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç (‡§®‡§æ‡§Æ, ID, ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä)..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-10 border-orange-200 focus:border-red-400"
                  />
                </div>
              </div>
              <div className="md:w-64">
                <select
                  value={selectedCategory}
                  onChange={(e) => setSelectedCategory(e.target.value)}
                  className="w-full px-3 py-2 border border-orange-200 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500"
                >
                  <option value="">‡§∏‡§¨‡•à ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä</option>
                  {categories.map((category) => (
                    <option key={category} value={category}>
                      {getCategoryEmoji(category)} {getCategoryName(category)}
                    </option>
                  ))}
                </select>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Bulk Actions */}
        <div className="mb-6">
          <Dialog>
            <DialogTrigger asChild>
              <Button variant="outline" className="border-red-200 text-red-600 hover:bg-red-50">
                <Trash2 className="h-4 w-4 mr-2" />
                ‡§¨‡•à‡§ö ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§π‡§∞‡•Ç ‡§Æ‡•á‡§ü‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>‡§¨‡•à‡§ö ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§π‡§∞‡•Ç ‡§Æ‡•á‡§ü‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</DialogTitle>
                <DialogDescription>‡§Ø‡§∏‡§Æ‡§æ ‡§ö‡§Ø‡§®‡§ø‡§§ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§π‡§∞‡•Ç ‡§Æ‡•á‡§ü‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§ ‡§ï‡•á ‡§§‡§™‡§æ‡§à‡§Ç ‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§π‡•Å‡§®‡•Å‡§π‡•Å‡§®‡•ç‡§õ?</DialogDescription>
              </DialogHeader>
              <div className="flex items-center justify-between mb-4">
                <Button variant="outline" onClick={handleSelectAllProducts}>
                  ‡§∏‡§¨‡•à ‡§®‡§ø‡§µ‡§°‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç
                </Button>
                <Button variant="outline" onClick={handleSelectNoneProducts}>
                  ‡§ï‡•Å‡§®‡•à ‡§®‡§ø‡§µ‡§°‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç
                </Button>
              </div>
              <Button onClick={handleBulkDelete} className="bg-red-600 hover:bg-red-700">
                <Trash2 className="h-4 w-4 mr-2" />
                ‡§Æ‡•á‡§ü‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç
              </Button>
            </DialogContent>
          </Dialog>
        </div>

        {/* Products Table */}
        <Card>
          <CardHeader>
            <CardTitle className="text-red-700">üìã ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§π‡§∞‡•Ç‡§ï‡•ã ‡§∏‡•Ç‡§ö‡•Ä ({filteredProducts.length})</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>
                      <Checkbox
                        checked={selectedProductIds.length === filteredProducts.length}
                        onCheckedChange={handleSelectAllProducts}
                      />
                    </TableHead>
                    <TableHead>‡§õ‡§µ‡§ø</TableHead>
                    <TableHead>ID</TableHead>
                    <TableHead>‡§®‡§æ‡§Æ</TableHead>
                    <TableHead>‡§∂‡•ç‡§∞‡•á‡§£‡•Ä</TableHead>
                    <TableHead>‡§Æ‡•Ç‡§≤‡•ç‡§Ø</TableHead>
                    <TableHead>‡§∏‡•ç‡§ü‡§ï</TableHead>
                    <TableHead>‡§∏‡•ç‡§•‡§ø‡§§‡§ø</TableHead>
                    <TableHead>‡§™‡•ç‡§∞‡§ï‡§æ‡§∞</TableHead>
                    <TableHead>‡§ï‡§æ‡§∞‡•ç‡§Ø‡§π‡§∞‡•Ç</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredProducts.map((product) => (
                    <TableRow key={product.id}>
                      <TableCell>
                        <Checkbox
                          checked={selectedProductIds.includes(product.id)}
                          onCheckedChange={() => handleSelectProduct(product.id)}
                        />
                      </TableCell>
                      <TableCell>
                        <Image
                          src={product.image || "nns.png?height=300&width=300"}
                          alt={product.name}
                          width={50}
                          height={50}
                          className="rounded-lg border border-gray-200 object-cover"
                          onError={(e) => {
                            const target = e.target as HTMLImageElement
                            target.src = "nns.png?height=300&width=300"
                          }}
                          unoptimized={product.image?.startsWith("data:") ? true : false}
                        />
                      </TableCell>
                      <TableCell className="font-mono text-sm">{product.id}</TableCell>
                      <TableCell>
                        <div>
                          <p className="font-medium">{product.name}</p>
                          <p className="text-sm text-gray-500">{product.nameEn}</p>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center space-x-1">
                          <span>{getCategoryEmoji(product.category)}</span>
                          <span className="text-sm">{getCategoryName(product.category)}</span>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div>
                          <p className="font-medium text-red-600">‡§∞‡•Å. {product.price}</p>
                          {product.originalPrice && (
                            <p className="text-sm text-gray-500 line-through">‡§∞‡•Å. {product.originalPrice}</p>
                          )}
                        </div>
                      </TableCell>
                      <TableCell>
                        <span className={`font-medium ${product.stock < 10 ? "text-red-600" : "text-green-600"}`}>
                          {product.stock}
                        </span>
                      </TableCell>
                      <TableCell>
                        <Badge variant={product.inStock ? "default" : "destructive"}>
                          {product.inStock ? "‡§∏‡•ç‡§ü‡§ï‡§Æ‡§æ ‡§õ" : "‡§∏‡•ç‡§ü‡§ï‡§Æ‡§æ ‡§õ‡•à‡§®"}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <Badge variant={product.isDemo ? "secondary" : "outline"}>
                          {product.isDemo ? "‡§°‡•á‡§Æ‡•ã" : "‡§è‡§°‡§Æ‡§ø‡§®"}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center space-x-2">
                          <Link href={`/products/${product.id}`} target="_blank">
                            <Button
                              size="sm"
                              variant="outline"
                              className="border-blue-200 text-blue-600 hover:bg-blue-50"
                            >
                              <Eye className="h-4 w-4" />
                            </Button>
                          </Link>
                          {!product.isDemo && (
                            <>
                              <Link href={`/admin/products/${product.id}/edit`}>
                                <Button
                                  size="sm"
                                  variant="outline"
                                  className="border-green-200 text-green-600 hover:bg-green-50"
                                >
                                  <Edit className="h-4 w-4" />
                                </Button>
                              </Link>
                              <Button
                                size="sm"
                                variant="outline"
                                className="border-red-200 text-red-600 hover:bg-red-50"
                                onClick={() => handleDeleteProduct(product.id)}
                              >
                                <Trash2 className="h-4 w-4" />
                              </Button>
                            </>
                          )}
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>

            {filteredProducts.length === 0 && (
              <div className="text-center py-12">
                <Package className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">‡§ï‡•Å‡§®‡•à ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§≠‡•á‡§ü‡§ø‡§è‡§®</h3>
                <p className="text-gray-500 mb-4">‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã ‡§ñ‡•ã‡§ú‡•Ä ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ï‡•Å‡§®‡•à ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§≠‡•á‡§ü‡§ø‡§è‡§®‡•§</p>
                <Link href="/admin/products/new">
                  <Button className="bg-red-600 hover:bg-red-700">
                    <Plus className="h-4 w-4 mr-2" />
                    ‡§™‡§π‡§ø‡§≤‡•ã ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§•‡§™‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç
                  </Button>
                </Link>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
