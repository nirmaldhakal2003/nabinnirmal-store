"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Separator } from "@/components/ui/separator"
import { Badge } from "@/components/ui/badge"
import { useToast } from "@/hooks/use-toast"
import { ArrowLeft, CheckCircle } from "lucide-react"
import Link from "next/link"
import Image from "next/image"
import LocationTracker from "@/components/LocationTracker"
import PaymentMethods from "@/components/PaymentMethods"

export default function CheckoutPage() {
  const [cartItems, setCartItems] = useState<any[]>([])
  const [customerInfo, setCustomerInfo] = useState({
    name: "",
    email: "",
    phone: "",
  })
  const [paymentMethod, setPaymentMethod] = useState("cash")
  const [locationData, setLocationData] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [orderPlaced, setOrderPlaced] = useState(false)
  const router = useRouter()
  const { toast } = useToast()

  useEffect(() => {
    // Load cart from localStorage
    const savedCart = localStorage.getItem("cart")
    if (savedCart) {
      setCartItems(JSON.parse(savedCart))
    } else {
      router.push("/cart")
    }

    // Load user info if logged in
    const userData = localStorage.getItem("user")
    if (userData) {
      const user = JSON.parse(userData)
      setCustomerInfo({
        name: user.name || "",
        email: user.email || "",
        phone: "",
      })
    }
  }, [router])

  const handleCustomerInfoChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setCustomerInfo({
      ...customerInfo,
      [e.target.name]: e.target.value,
    })
  }

  const handleLocationUpdate = (data: any) => {
    setLocationData(data)
  }

  const calculateTotals = () => {
    const subtotal = cartItems.reduce((total, item) => total + item.price * item.quantity, 0)
    const deliveryFee = locationData?.deliveryInfo?.deliveryFee || 100
    const tax = subtotal * 0.13 // 13% VAT
    const total = subtotal + deliveryFee + tax

    return { subtotal, deliveryFee, tax, total }
  }

  const handlePlaceOrder = async (paymentData?: any) => {
    if (!customerInfo.name || !customerInfo.phone) {
      toast({
        title: "‡§Ö‡§ß‡•Ç‡§∞‡•ã ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä",
        description: "‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡§æ‡§Æ ‡§∞ ‡§´‡•ã‡§® ‡§®‡§Æ‡•ç‡§¨‡§∞ ‡§¶‡§ø‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§",
        variant: "destructive",
      })
      return
    }

    if (!locationData) {
      toast({
        title: "‡§†‡•á‡§ó‡§æ‡§®‡§æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï",
        description: "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ü‡§´‡•ç‡§®‡•ã ‡§†‡•á‡§ó‡§æ‡§®‡§æ ‡§¶‡§ø‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§",
        variant: "destructive",
      })
      return
    }

    setIsLoading(true)

    try {
      const { subtotal, deliveryFee, tax, total } = calculateTotals()

      const orderData = {
        customer: customerInfo,
        items: cartItems,
        location: locationData,
        paymentMethod: paymentData?.method || paymentMethod,
        paymentData: paymentData,
        pricing: {
          subtotal,
          deliveryFee,
          tax,
          total,
        },
        specialInstructions: "",
      }

      const response = await fetch("/api/orders", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(orderData),
      })

      if (!response.ok) {
        throw new Error("‡§Ö‡§∞‡•ç‡§°‡§∞ ‡§∞‡§æ‡§ñ‡•ç‡§® ‡§∏‡§ï‡§ø‡§è‡§®")
      }

      const order = await response.json()

      // Clear cart
      localStorage.removeItem("cart")
      window.dispatchEvent(new Event("cartUpdated"))

      setOrderPlaced(true)

      toast({
        title: "‡§Ö‡§∞‡•ç‡§°‡§∞ ‡§∏‡§´‡§≤!",
        description: `‡§Ö‡§∞‡•ç‡§°‡§∞ ID: ${order.id}‡•§ ‡§π‡§æ‡§Æ‡•Ä ‡§õ‡§ø‡§ü‡•ç‡§ü‡•à ‡§∏‡§Æ‡•ç‡§™‡§∞‡•ç‡§ï ‡§ó‡§∞‡•ç‡§®‡•á‡§õ‡•å‡§Ç‡•§`,
      })

      // Redirect to order confirmation after 3 seconds
      setTimeout(() => {
        router.push(`/orders/${order.id}`)
      }, 3000)
    } catch (error: any) {
      toast({
        title: "‡§§‡•ç‡§∞‡•Å‡§ü‡§ø",
        description: error.message,
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  if (orderPlaced) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-green-50 to-white flex items-center justify-center py-8">
        <Card className="max-w-md mx-auto border-green-200">
          <CardContent className="p-8 text-center">
            <CheckCircle className="h-16 w-16 text-green-600 mx-auto mb-4" />
            <h2 className="text-2xl font-bold text-green-700 mb-2">‡§Ö‡§∞‡•ç‡§°‡§∞ ‡§∏‡§´‡§≤!</h2>
            <p className="text-gray-600 mb-4">‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã ‡§Ö‡§∞‡•ç‡§°‡§∞ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∞‡§æ‡§ñ‡§ø‡§è‡§ï‡•ã ‡§õ‡•§ ‡§π‡§æ‡§Æ‡•Ä ‡§õ‡§ø‡§ü‡•ç‡§ü‡•à ‡§§‡§™‡§æ‡§à‡§Ç‡§≤‡§æ‡§à ‡§∏‡§Æ‡•ç‡§™‡§∞‡•ç‡§ï ‡§ó‡§∞‡•ç‡§®‡•á‡§õ‡•å‡§Ç‡•§</p>
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mx-auto"></div>
            <p className="text-sm text-gray-500 mt-2">Order confirmation ‡§Æ‡§æ redirect ‡§ó‡§∞‡•ç‡§¶‡•à...</p>
          </CardContent>
        </Card>
      </div>
    )
  }

  if (cartItems.length === 0) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-orange-50 to-white py-8">
        <div className="container mx-auto px-4 text-center">
          <h1 className="text-2xl font-bold text-gray-800 mb-4">‡§ï‡§æ‡§∞‡•ç‡§ü ‡§ñ‡§æ‡§≤‡•Ä ‡§õ</h1>
          <Link href="/products">
            <Button className="bg-red-600 hover:bg-red-700">‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§π‡§∞‡•Ç ‡§π‡•á‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</Button>
          </Link>
        </div>
      </div>
    )
  }

  const { subtotal, deliveryFee, tax, total } = calculateTotals()

  return (
    <div className="min-h-screen bg-gradient-to-b from-orange-50 to-white py-8">
      <div className="container mx-auto px-4 max-w-6xl">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center space-x-4 mb-4">
            <Link href="/cart">
              <Button variant="outline" size="sm" className="border-red-200 text-red-600 hover:bg-red-50">
                <ArrowLeft className="h-4 w-4 mr-2" />
                ‡§ï‡§æ‡§∞‡•ç‡§ü‡§Æ‡§æ ‡§´‡§ø‡§∞‡•ç‡§§‡§æ
              </Button>
            </Link>
            <div>
              <h1 className="text-3xl font-bold text-gray-800">üõí ‡§ö‡•á‡§ï‡§Ü‡§â‡§ü</h1>
              <p className="text-gray-600">‡§Ü‡§´‡•ç‡§®‡•ã ‡§Ö‡§∞‡•ç‡§°‡§∞ ‡§™‡•Ç‡§∞‡§æ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</p>
            </div>
          </div>
        </div>

        <div className="grid lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-6">
            {/* Customer Information */}
            <Card className="border-orange-200">
              <CardHeader className="bg-gradient-to-r from-blue-50 to-indigo-50">
                <CardTitle className="text-blue-700">üë§ ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä</CardTitle>
              </CardHeader>
              <CardContent className="p-6 space-y-4">
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="name">‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ *</Label>
                    <Input
                      id="name"
                      name="name"
                      required
                      value={customerInfo.name}
                      onChange={handleCustomerInfoChange}
                      placeholder="‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã ‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ"
                      className="border-orange-200 focus:border-blue-400"
                    />
                  </div>
                  <div>
                    <Label htmlFor="phone">‡§´‡•ã‡§® ‡§®‡§Æ‡•ç‡§¨‡§∞ *</Label>
                    <Input
                      id="phone"
                      name="phone"
                      type="tel"
                      required
                      value={customerInfo.phone}
                      onChange={handleCustomerInfoChange}
                      placeholder="‡•Ø‡•ÆXXXXXXXX"
                      className="border-orange-200 focus:border-blue-400"
                    />
                  </div>
                </div>
                <div>
                  <Label htmlFor="email">‡§á‡§Æ‡•á‡§≤</Label>
                  <Input
                    id="email"
                    name="email"
                    type="email"
                    value={customerInfo.email}
                    onChange={handleCustomerInfoChange}
                    placeholder="your@email.com"
                    className="border-orange-200 focus:border-blue-400"
                  />
                </div>
              </CardContent>
            </Card>

            {/* Location & Delivery */}
            <Card className="border-orange-200">
              <CardHeader className="bg-gradient-to-r from-green-50 to-emerald-50">
                <CardTitle className="text-green-700">üìç ‡§°‡•á‡§≤‡§ø‡§≠‡§∞‡•Ä ‡§†‡•á‡§ó‡§æ‡§®‡§æ</CardTitle>
              </CardHeader>
              <CardContent className="p-6">
                <LocationTracker onLocationUpdate={handleLocationUpdate} />
              </CardContent>
            </Card>

            {/* Payment Methods */}
            <PaymentMethods
              amount={total}
              orderId={`ORD-${Date.now()}`}
              customerInfo={customerInfo}
              onPaymentSuccess={(paymentData) => {
                console.log("Payment successful:", paymentData)
                handlePlaceOrder(paymentData)
              }}
              onPaymentError={(error) => {
                toast({
                  title: "‡§≠‡•Å‡§ï‡•ç‡§§‡§æ‡§®‡•Ä ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø",
                  description: error,
                  variant: "destructive",
                })
              }}
            />
          </div>

          {/* Order Summary */}
          <div>
            <Card className="border-orange-200 sticky top-8">
              <CardHeader className="bg-gradient-to-r from-red-50 to-orange-50">
                <CardTitle className="text-red-700">üìã ‡§Ö‡§∞‡•ç‡§°‡§∞ ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂</CardTitle>
              </CardHeader>
              <CardContent className="p-6">
                {/* Cart Items */}
                <div className="space-y-3 mb-4">
                  {cartItems.map((item) => (
                    <div key={item.id} className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg">
                      <Image
                        src={item.image || "nns.png"}
                        alt={item.name}
                        width={50}
                        height={50}
                        className="rounded-lg border border-gray-200"
                      />
                      <div className="flex-1">
                        <p className="font-medium text-sm">{item.name}</p>
                        <p className="text-xs text-gray-500">
                          ‡§∞‡•Å. {item.price} √ó {item.quantity}
                        </p>
                      </div>
                      <p className="font-medium text-red-600">‡§∞‡•Å. {(item.price * item.quantity).toFixed(2)}</p>
                    </div>
                  ))}
                </div>

                <Separator className="my-4" />

                {/* Pricing Breakdown */}
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span>‡§â‡§™-‡§ú‡§Æ‡•ç‡§Æ‡§æ:</span>
                    <span>‡§∞‡•Å. {subtotal.toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>‡§°‡•á‡§≤‡§ø‡§≠‡§∞‡•Ä ‡§∂‡•Å‡§≤‡•ç‡§ï:</span>
                    <span>‡§∞‡•Å. {deliveryFee.toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>‡§ï‡§∞ (‡•ß‡•©% VAT):</span>
                    <span>‡§∞‡•Å. {tax.toFixed(2)}</span>
                  </div>
                  <Separator />
                  <div className="flex justify-between font-bold text-lg text-red-700">
                    <span>‡§ï‡•Å‡§≤ ‡§ú‡§Æ‡•ç‡§Æ‡§æ:</span>
                    <span>‡§∞‡•Å. {total.toFixed(2)}</span>
                  </div>
                </div>

                {/* Delivery Info */}
                {locationData?.deliveryInfo && (
                  <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                    <p className="text-sm text-blue-800">
                      üöö ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§°‡•á‡§≤‡§ø‡§≠‡§∞‡•Ä: {locationData.deliveryInfo.estimatedTime}
                    </p>
                  </div>
                )}

                {/* Place Order Button */}
                <Button
                  onClick={handlePlaceOrder}
                  disabled={isLoading || !locationData}
                  className="w-full mt-6 bg-red-600 hover:bg-red-700"
                  size="lg"
                >
                  {isLoading ? (
                    <div className="flex items-center space-x-2">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                      <span>‡§Ö‡§∞‡•ç‡§°‡§∞ ‡§∞‡§æ‡§ñ‡•ç‡§¶‡•à...</span>
                    </div>
                  ) : (
                    <>
                      <CheckCircle className="h-5 w-5 mr-2" />
                      ‡§Ö‡§∞‡•ç‡§°‡§∞ ‡§∞‡§æ‡§ñ‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç (‡§∞‡•Å. {total.toFixed(2)})
                    </>
                  )}
                </Button>

                <div className="mt-4">
                  <div className="text-center text-sm text-gray-500 mb-2">‡§µ‡§æ</div>
                  <Button
                    variant="outline"
                    className="w-full border-green-200 text-green-600 hover:bg-green-50"
                    onClick={() => {
                      const orderSummary = `
üõí ‡§®‡§Ø‡§æ‡§Å ‡§Ö‡§∞‡•ç‡§°‡§∞:
üë§ ‡§®‡§æ‡§Æ: ${customerInfo.name}
üìû ‡§´‡•ã‡§®: ${customerInfo.phone}
üìß ‡§á‡§Æ‡•á‡§≤: ${customerInfo.email}

üõçÔ∏è ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®‡§π‡§∞‡•Ç:
${cartItems.map((item) => `‚Ä¢ ${item.name} (${item.quantity}x) - ‡§∞‡•Å. ${(item.price * item.quantity).toFixed(2)}`).join("\n")}

üí∞ ‡§ï‡•Å‡§≤ ‡§∞‡§ï‡§Æ: ‡§∞‡•Å. ${total.toFixed(2)}
üöö ‡§°‡•á‡§≤‡§ø‡§≠‡§∞‡•Ä: ${locationData?.address || "‡§†‡•á‡§ó‡§æ‡§®‡§æ ‡§¶‡§ø‡§®‡•Å‡§π‡•ã‡§∏‡•ç"}
üí≥ ‡§≠‡•Å‡§ï‡•ç‡§§‡§æ‡§®‡•Ä: ‡§®‡§ó‡§¶ (‡§°‡•á‡§≤‡§ø‡§≠‡§∞‡•Ä‡§Æ‡§æ)
                      `.trim()

                      window.open(`https://wa.me/9779748845865?text=${encodeURIComponent(orderSummary)}`, "_blank")
                    }}
                  >
                    üì± WhatsApp ‡§Æ‡§æ‡§∞‡•ç‡§´‡§§ ‡§Ö‡§∞‡•ç‡§°‡§∞ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç
                  </Button>
                </div>

                {/* Payment Method Display */}
                <div className="mt-4 text-center">
                  <Badge variant="outline" className="border-green-200 text-green-700">
                    {paymentMethod === "cash" && "üí∞ ‡§®‡§ó‡§¶ ‡§≠‡•Å‡§ï‡•ç‡§§‡§æ‡§®‡•Ä"}
                    {paymentMethod === "esewa" && "üì± eSewa"}
                    {paymentMethod === "khalti" && "üí≥ Khalti"}
                  </Badge>
                </div>

                {/* Security Note */}
                <div className="mt-4 p-3 bg-gray-50 rounded-lg">
                  <p className="text-xs text-gray-600 text-center">
                    üîí ‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§õ‡•§ ‡§π‡§æ‡§Æ‡•Ä ‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã privacy ‡§ï‡•ã ‡§∏‡§Æ‡•ç‡§Æ‡§æ‡§® ‡§ó‡§∞‡•ç‡§õ‡•å‡§Ç‡•§
                  </p>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}
